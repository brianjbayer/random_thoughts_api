#!/bin/sh
# ----------------------------------------------------------------------
# This script runs the project docker-compose framework.
#
# - The arguments to this script are passed to the app service
#   as command override
#
# - Any environment variables set when calling this script are passed
#   through to the docker-compose framework
#   (e.g. configuration other than the defaults)
#
# OPTIONS:
# -c: Use the docker-compose CI environment with APP_IMAGE
# -d: Use the docker-compose Dev environment with APP_IMAGE
# -n: No application database in the docker-compose environment
# -p: Run the performance tests (and not the app service)
# -t: Run the e2e tests (and not the app service)
# ----------------------------------------------------------------------

usage() {
  echo "Usage: $0 [-cdnpt] [CMD]"
}

err_exit() {
  local err_msg="$1"
  local err_code=$2
  echo "${err_msg}  --  Exit:[${err_code}]" 1>&2
  usage
  exit $err_code
}

# Exit script on any errors
set -e

# Handle options
while getopts ":cdnpt" options; do
  case "${options}" in
    c)
      echo "CI Environment"
      ci=true
      ;;

    d)
      echo "Development Environment"
      devenv=true
      ;;

    n)
      echo "No Database"
      no_database=true
      ;;

    p)
      echo "Running Perf Tests"
      run_perftests=true
      ;;

    t)
      echo "Running End-To-End (E2E) Tests"
      run_e2etests=true
      ;;

    \?)
    err_exit "Invalid Option: -$OPTARG" 1
      ;;
  esac
done
shift $((OPTIND-1))

if [ ! -z ${run_perftests} ] && [ ! -z ${run_e2etests} ]; then
echo ''
echo "ERROR: you can not select both the '-p' (Perf Tests) and '-t' (End-To-End Tests) options!!!"
exit 86
fi

echo ''
echo "ENVIRONMENT VARIABLES..."
env
echo ''

echo 'DOCKER (COMPOSE) VERSION...'
docker --version
echo ''

# Initial docker compose command before environments
docker_compose_command='docker compose -f docker-compose.yml '

# Unless the no database option is set, add the database service
if [ -z ${no_database} ]; then
  echo "...Adding Database to Environment"
  docker_compose_command="${docker_compose_command} -f docker-compose.db.yml "
fi

if [ ! -z ${ci} ]; then
  echo "...Using CI Environment with Image [${APP_IMAGE}]"
  docker_compose_command="${docker_compose_command} -f docker-compose.ci.yml "
fi

if [ ! -z ${devenv} ]; then
  echo "...Using Development Environment with Image [${APP_IMAGE}]"
  docker_compose_command="${docker_compose_command} -f docker-compose.dev.yml "
fi

if [ ! -z ${run_perftests} ]; then
  echo "...Running Perf Tests Image [${PERFTESTS_IMAGE}] against Image [${APP_IMAGE}]"
  docker_compose_command="${docker_compose_command} -f docker-compose.perf.yml "
fi

if [ ! -z ${run_e2etests} ]; then
  echo "...Running E2E Tests Image [${E2ETESTS_IMAGE}] against Image [${APP_IMAGE}]"
  docker_compose_command="${docker_compose_command} -f docker-compose.e2e.yml "
fi
echo ''

echo "DOCKER-COMPOSE COMMAND: [${docker_compose_command}]"
echo ''

echo 'DOCKER-COMPOSE CONFIGURATION...'
$docker_compose_command config
echo ''

echo 'DOCKER-COMPOSE PULLING...'
set +e
$docker_compose_command pull
echo '...Allowing pull errors (for local images)'
set -e
echo ''

echo 'DOCKER IMAGES...'
docker images
echo ''

echo "DOCKER-COMPOSE RUNNING [$@]..."
# Allow to fail but catch return code
set +e
if [ ! -z ${run_perftests} ]; then
  echo "RUNNING THE PERF TESTS (perftests SERVICE) (NOT app SERVICE)..."
  $docker_compose_command run --rm perftests "$@"
  # NOTE return code must be caught before any other command
  run_return_code=$?
elif [ ! -z ${run_e2etests} ]; then
  echo "RUNNING THE E2E TESTS (e2etests SERVICE) (NOT app SERVICE)..."
  $docker_compose_command run --rm e2etests "$@"
  # NOTE return code must be caught before any other command
  run_return_code=$?
else
  # Specify the --service-ports option to expose app's PORTS
  # on host machine (by default docker-compose run does not
  # expose host ports)
  $docker_compose_command run --rm --service-ports app "$@"
  # NOTE return code must be caught before any other command
  run_return_code=$?
fi
set -e
echo ''

if [ $run_return_code -eq 0 ]; then
  run_disposition='PASSED'
else
  run_disposition='FAILED'
fi
echo "...RUN [${run_disposition}] WITH RETURN CODE [${run_return_code}]"
echo ''

echo 'DOCKER-COMPOSE DOWN...'
$docker_compose_command down
echo ''

echo "EXITING WITH ${run_disposition} RUN RETURN CODE ${run_return_code}"
exit $run_return_code
