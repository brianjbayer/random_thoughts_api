name: On PR Build Push Vet

on:
  pull_request:
    branches:
      - main

# FYI...
#  Raw Branch Name: ${{ github.head_ref }}
#  <commit-sha>: ${{ github.event.pull_request.head.sha }}

# Produced multi-architecture (linux/amd64,linux/arm64) images...
#  1. (Always) Unvetted Image: <owner/repository>_<normalized-branch>_unvetted:<commit-sha>
#  2. (Always) Dev Environment Image: <owner/repository>_<normalized-branch>_dev:<commit-sha>
#  3. (If vetted) Vetted_image: <owner/repository>_<normalized-branch>:<commit-sha>

jobs:
  # Normalize the branch for image name
  pr-norm-branch:
    uses: brianjbayer/actions-image-cicd/.github/workflows/normalize_for_image_name.yml@main
    with:
      raw_name: ${{ github.head_ref }}

  # Build and Push Images
  buildx-and-push-branch-devenv:
    needs: [pr-norm-branch]
    uses: brianjbayer/actions-image-cicd/.github/workflows/buildx_push_image.yml@main
    with:
      image: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_dev:${{ github.event.pull_request.head.sha }}
      platforms: "linux/amd64,linux/arm64"
      buildopts: --target devenv
    secrets:
      registry_u: ${{ secrets.DOCKER_HUB_USERNAME }}
      registry_p: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  buildx-and-push-branch-unvetted:
    needs: [pr-norm-branch]
    uses: brianjbayer/actions-image-cicd/.github/workflows/buildx_push_image.yml@main
    with:
      image: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_unvetted:${{ github.event.pull_request.head.sha }}
      platforms: "linux/amd64,linux/arm64"
    secrets:
      registry_u: ${{ secrets.DOCKER_HUB_USERNAME }}
      registry_p: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  # Vetting
  vet-code-standards:
    needs: [pr-norm-branch, buildx-and-push-branch-devenv]
    runs-on: ubuntu-latest
    env:
      DEVENV_IMAGE: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_dev:${{ github.event.pull_request.head.sha }}
    steps:
      - uses: actions/checkout@v1
      - name: dockercomposerun linting on development environment
        run: "APP_IMAGE=${DEVENV_IMAGE} ./script/dockercomposerun -d ./script/run lint"

  vet-dependency-security:
    needs: [pr-norm-branch, buildx-and-push-branch-devenv]
    runs-on: ubuntu-latest
    env:
      DEVENV_IMAGE: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_dev:${{ github.event.pull_request.head.sha }}
    steps:
      - uses: actions/checkout@v1
      - name: dockercomposerun dependency scanning on development environment
        run: "APP_IMAGE=${DEVENV_IMAGE} ./script/dockercomposerun -d ./script/run depsecscan"

  vet-static-security:
    needs: [pr-norm-branch, buildx-and-push-branch-devenv]
    runs-on: ubuntu-latest
    env:
      DEVENV_IMAGE: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_dev:${{ github.event.pull_request.head.sha }}
    steps:
      - uses: actions/checkout@v1
      - name: dockercomposerun static security analysis on development environment
        run: "APP_IMAGE=${DEVENV_IMAGE} ./script/dockercomposerun -d ./script/run statsecscan"

  vet-unit-tests:
    needs: [pr-norm-branch, buildx-and-push-branch-devenv]
    runs-on: ubuntu-latest
    env:
      DEVENV_IMAGE: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_dev:${{ github.event.pull_request.head.sha }}
      RAILS_ENV: test
    steps:
      - uses: actions/checkout@v1
      - name: dockercomposerun tests on development environment
        run: "APP_IMAGE=${DEVENV_IMAGE} ./script/dockercomposerun -d ./script/run tests"

  vet-swagger-file-currency:
    needs: [pr-norm-branch, buildx-and-push-branch-devenv]
    runs-on: ubuntu-latest
    env:
      DEVENV_IMAGE: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_dev:${{ github.event.pull_request.head.sha }}
      RAILS_ENV: test
    steps:
      - uses: actions/checkout@v1
      - name: dockercomposerun swaggerize on development environment
        run: "APP_IMAGE=${DEVENV_IMAGE} ./script/dockercomposerun -d ./script/run swaggerize"
      - name: git diff Swagger File(s) to ensure no changes
        run: git diff --exit-code swagger

  vet-deploy-as-e2e-tests-target:
    needs: [pr-norm-branch, buildx-and-push-branch-unvetted]
    runs-on: ubuntu-latest
    env:
      UNVETTED_IMAGE: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_unvetted:${{ github.event.pull_request.head.sha }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
      APP_JWT_SECRET: ${{ secrets.APP_JWT_SECRET }}
    steps:
      - uses: actions/checkout@v1
      - name: dockercomposerun e2e tests against unvetted image
        run: "APP_IMAGE=${UNVETTED_IMAGE} ./script/dockercomposerun -ce"

  # Push (IF) Vetted Deploy Image
  push-branch-vetted-deploy-image:
    needs:
      - vet-deploy-as-e2e-tests-target
      - vet-unit-tests
      - vet-swagger-file-currency
      - vet-static-security
      - vet-dependency-security
      - vet-code-standards
      - buildx-and-push-branch-unvetted
      - pr-norm-branch
    uses: brianjbayer/actions-image-cicd/.github/workflows/copy_image.yml@main
    with:
      source_image: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_unvetted:${{ github.event.pull_request.head.sha }}
      target_image: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}:${{ github.event.pull_request.head.sha }}
    secrets:
      registry_u: ${{ secrets.DOCKER_HUB_USERNAME }}
      registry_p: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

# Vet Dev Environment Image
  vet-devenv-as-e2e-tests-target:
    needs: [pr-norm-branch, buildx-and-push-branch-devenv]
    runs-on: ubuntu-latest
    env:
      DEVENV_IMAGE: ${{ github.repository }}_${{ needs.pr-norm-branch.outputs.name }}_dev:${{ github.event.pull_request.head.sha }}
      RAILS_ENV: development
    steps:
      - uses: actions/checkout@v1
      - name: dockercomposerun e2e tests against devenv image
        run: "APP_IMAGE=${DEVENV_IMAGE} ./script/dockercomposerun -de"
