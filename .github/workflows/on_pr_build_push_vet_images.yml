name: Build and Vet

on:
  pull_request:
    branches:
      - main

jobs:

  # --- Image Names ---

  image-names:
    name: PR (Branch) Image Names
    uses: brianjbayer/actions-image-cicd/.github/workflows/image_names.yml@v0.2
    with:
      add_branch_name: true

  # --- Build and Push Images ---

  buildx-and-push-dev-image:
    name: Build Development Image
    needs:
      - image-names
    uses: brianjbayer/actions-image-cicd/.github/workflows/buildx_amd_arm_image.yml@v0.2
    with:
      image: ${{ needs.image-names.outputs.dev_image }}
      buildopts: --target devenv
    secrets:
      registry_u: ${{ secrets.DOCKER_HUB_USERNAME }}
      registry_p: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  buildx-and-push-unvetted-image:
    name: Build Deployment (Unvetted) Image
    needs:
      - image-names
    uses: brianjbayer/actions-image-cicd/.github/workflows/buildx_amd_arm_image.yml@v0.2
    with:
      image: ${{ needs.image-names.outputs.unvetted_image }}
    secrets:
      registry_u: ${{ secrets.DOCKER_HUB_USERNAME }}
      registry_p: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  # --- Vet Images ---

  vet-lint-security-unit-tests:
    name: Vet Code Quality
    needs:
      - image-names
      - buildx-and-push-dev-image
    uses: brianjbayer/actions-image-cicd/.github/workflows/vet_code_standards.yml@v0.2
    with:
      lint_command: "APP_IMAGE=${{ needs.image-names.outputs.dev_image }} ./script/dockercomposerun -do ./script/run lint"
      dependency_security_command: "APP_IMAGE=${{ needs.image-names.outputs.dev_image }} ./script/dockercomposerun -do ./script/run depsecscan"
      static_security_command: "APP_IMAGE=${{ needs.image-names.outputs.dev_image }} ./script/dockercomposerun -do ./script/run statsecscan"
      tests_command: "RAILS_ENV=test APP_IMAGE=${{ needs.image-names.outputs.dev_image }} ./script/dockercomposerun -d ./script/run tests"

  vet-swagger-file-currency:
    name: Vet Open API (Swagger) Documentation
    runs-on: ubuntu-latest
    needs:
      - image-names
      - buildx-and-push-dev-image
    env:
      DEVENV_IMAGE: ${{ needs.image-names.outputs.dev_image }}
      RAILS_ENV: test
    steps:
      - uses: actions/checkout@v4
      - name: dockercomposerun swaggerize on development environment
        run: "APP_IMAGE=${DEVENV_IMAGE} ./script/dockercomposerun -d ./script/run swaggerize"
      - name: git diff Swagger File(s) to ensure no changes
        run: git diff --exit-code swagger

  # - End-to-End Tests -
  vet-e2e-tests-deployment:
    name: Vet E2E Tests (Deployment Image)
    runs-on: ubuntu-latest
    needs:
      - image-names
      - buildx-and-push-unvetted-image
    env:
      UNVETTED_IMAGE: ${{ needs.image-names.outputs.unvetted_image }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
      APP_JWT_SECRET: ${{ secrets.APP_JWT_SECRET }}
    steps:
      - uses: actions/checkout@v4
      - name: dockercomposerun e2e tests against unvetted image
        run: "APP_IMAGE=${UNVETTED_IMAGE} ./script/dockercomposerun -ce"

  run-e2e-tests-development:
    name: Run E2E Tests (Development Image)
    runs-on: ubuntu-latest
    needs:
      - image-names
      - buildx-and-push-dev-image
    env:
      DEVENV_IMAGE: ${{ needs.image-names.outputs.dev_image }}
    steps:
      - uses: actions/checkout@v4
      - name: dockercomposerun e2e tests against devenv image
        run: "APP_IMAGE=${DEVENV_IMAGE} ./script/dockercomposerun -de"

  # --- Promote Vetted Image If It Passes ---

  copy-branch-vetted-deploy-image:
    name: Promote Vetted Deployment Image
    needs:
      - image-names
      - vet-lint-security-unit-tests
      - vet-swagger-file-currency
      - vet-e2e-tests-deployment
    uses: brianjbayer/actions-image-cicd/.github/workflows/copy_image.yml@v0.2
    with:
      source_image: ${{ needs.image-names.outputs.unvetted_image }}
      target_image: ${{ needs.image-names.outputs.vetted_image }}
    secrets:
      registry_u: ${{ secrets.DOCKER_HUB_USERNAME }}
      registry_p: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
